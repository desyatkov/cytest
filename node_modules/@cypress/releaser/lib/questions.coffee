_         = require("lodash")
chalk     = require("chalk")
semver    = require("semver")
moment    = require("moment")
Promise   = require("bluebird")
inquirer  = require("inquirer")
cwd       = require("./utils/cwd")
changelog = require("./changelog")

pkg = require(cwd("package.json"))

dasherize = (value) ->
  "- " + _.chain(value).trimStart("-").trimStart("*").trim().value()

prompt = (questions) ->
  Promise.resolve(inquirer.prompt(questions))

getDistTags = {
  type: "list"
  name: "tag"
  message: "Is this an official release or an internal development release?"
  choices: [
    { name: "Official: npm users will automatically install this new version by default", value: "latest", short: "Tagging dist as (latest)"}
    { name: "Internal: npm users will have to explictly install this version", value: "dev", short: "Tagging dist as (dev)"}
  ]
}

getCustomVersion = {
  type: "input"
  name: "version"
  message: "Bump custom version to...?"
}

getConfirmation = {
  type: "list"
  name: "confirm"
  message: "Does this changelog look ok?"
  choices: [
    {name: "Yes, it looks great! Commit this.", value: true, short: "Yes"}
    {name: "No, I want to change something. Do not commit.", value: false, short: "No"}
  ]
}

getConfig = {
  type: "list"
  name: "create"
  message: "Would you like us to create this configuration file for you?"
  choices: [
    {name: "Yes, create it for me.", value: true, short: "Yes"}
    {name: "No, do not create it for me.", value: false, short: "No"}
  ]
}

getNode = {
  type: "list"
  name: "create"
  message: "Would you like us to create this file for you?"
  choices: [
    {name: "Yes, create it for me.", value: true, short: "Yes"}
    {name: "No, do not create it for me.", value: false, short: "No"}
  ]
}

getNodeVersion = {
  type: "input"
  name: "nodeVersion"
  default: "6.5.0"
  message: "Which version of node would you like to set?"
}

getVersion = (distTag) -> [
  {
    name: "version"
    type: "list"
    message: "Bump the version to...?"
    choices: ->
      v = pkg.version

      patch = semver.inc(v, "patch")
      minor = semver.inc(v, "minor")
      major = semver.inc(v, "major")

      if distTag isnt "latest"
        todaysDate = moment().format("YYYYMMDD.HHmmss")
        appendix   = "-#{distTag}.#{todaysDate}"

        patch += appendix
        minor += appendix
        major += appendix

      return [
        {name: "#{v} -> #{patch} (patch)", value: patch, short: patch}
        {name: "#{v} -> #{minor} (minor)", value: minor, short: minor}
        {name: "#{v} -> #{major} (major)", value: major, short: major}
        new inquirer.Separator(),
        {name: "custom...", value: "custom", short: "custom"}
      ]
  }
]

getChangelog = (version) ->
  type: "input"
  name: "changelog"
  message: [
    "What are the changes for the changelog?",
    chalk.gray("  - excess white space will be trimmed")
    chalk.gray("  - separate multiple lines with: #{chalk.red("\\")}")
    chalk.gray("  - lines will automatically be prepended with a dash: #{chalk.red("-")}")
    chalk.gray("  - example: ") + chalk.cyan("updated tests \\ fixed bugs   \\ added cli arg")
    chalk.gray("  - would create a changelog:")
    chalk.cyan("    #{chalk.underline(version)}")
    chalk.cyan("    - updated tests")
    chalk.cyan("    - fixed bugs")
    chalk.cyan("    - added cli arg")
    ">"
  ].join("\n")

module.exports = {
  askDistTag: ->
    prompt(getDistTags)
    .get('tag')

  askWhichNodeVersion: (pathToNodeVersion) ->
    prompt(getNodeVersion)
    .get('nodeVersion')

  askToCreateNodeVersion: (pathToNodeVersion) ->
    console.log(chalk.red("It looks like you are missing: ") + chalk.cyan(pathToNodeVersion))
    console.log("")
    console.log(chalk.yellow("> Setting a .node-version helps contributors automatically switch to the correct node version for this project."))
    console.log("")

    prompt(getNode)
    .get("create")

  askToCreateConfig: (pathToRelease) ->
    console.log(chalk.red("It looks like you are missing: ") + chalk.cyan(pathToRelease))
    console.log("")
    console.log(chalk.yellow("> This file contains the default configuration we use to release modules."))
    console.log("")

    prompt(getConfig)
    .get("create")

  askChangelogAndConfirm: (version) ->
    @askChangelog(version)
    .then (changelogs = []) =>
      @askChangelogConfirmation(version, changelogs)
      .catch =>
        ## recursively ask again!
        @askChangelogAndConfirm(version)

  askChangelogConfirmation: (version, changelogs = []) ->
    changelog = changelogs.join("\n")

    console.log ""
    console.log "Ok. Your changelog will be:"
    console.log chalk.green.underline(version)
    console.log chalk.green(changelog)
    console.log ""

    prompt(getConfirmation)
    .get("confirm")
    .then (confirm) ->
      if confirm
        return changelog
      else
        throw new Error

  askChangelog: (version) ->
    prompt(getChangelog(version))
    .get("changelog")
    .then (changelog) ->
      changelog = changelog.split("\\")

      _.chain(changelog).compact().map(dasherize).value()

  askCustomVersion: ->
    prompt(getCustomVersion)
    .get("version")

  askVersion: (distTag) ->
    console.log(chalk.yellow("Currently on: #{chalk.green.underline(pkg.version)}"))
    console.log("")
    prompt(getVersion(distTag))
    .get("version")
    .then (version) =>
      if version is "custom"
        @askCustomVersion()
      else
        return version
}
