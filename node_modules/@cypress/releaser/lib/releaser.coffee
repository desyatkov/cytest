fs        = require("fs-extra")
minimist  = require("minimist")
Promise   = require("bluebird")
release   = require("release-it")
cli       = require("release-it/lib/cli")
rGit      = require("release-it/lib/git")
cwd       = require("./utils/cwd")
git       = require("./git")
node      = require("./node")
config    = require("./config")
changelog = require("./changelog")
questions = require("./questions")

pkg = require(cwd("package.json"))

getChangelog = (ask, version) ->
  ## bail if we've turned off asking for a changelog
  return Promise.resolve() if ask is false

  ## then ask for the changelog + confirm
  questions.askChangelogAndConfirm(version)
  .then (str) ->
    ## now append this to the README
    ## and return the original changelog
    changelog
    .append(version, str)
    .return(str)

module.exports = {
  run: (argv = []) ->
    options = minimist(argv, {
      default: {
        branch: "master"
        changelog: true
        clean:  true
        node:   true
      }
    })

    ## verify we're on the correct branch
    git.verifyBranch(options.branch)
    .then ->
      ## verify we dont have an uncommited files
      git.verifyCleanWorkingDir(options.clean)
    .then ->
      ## verify we have a .node-version set
      node.ensureVersion(options.node)
    .then ->
      ## verify we have a releasor.json
      config.ensure()
    .then ->
      questions.askDistTag()
    .then (distTag) ->
      ## then prompt for the version
      questions.askVersion(distTag)
      .then (version) ->
        getChangelog(options.changelog, version)
        .then (log) ->
          ## parse the release cli args
          ## and pass the existing args through
          options = cli.parse(argv)

          ## set changelog to be the log we
          ## set earlier
          if options.changelog
            options.changelogCommand = "echo '#{log}'"

          if distTag isnt "latest"
            rGit.commit = ->
              console.log("Not creating a commit because this is not an official release.")

            rGit.tag = ->
              console.log("Not creating a tag because this is not an official release.")

            rGit.push = ->
              console.log("Not creating a tag because this is not an official release.")

            rGit.pushTags = ->
              console.log("Not pushing tags because this is not an official release.")

          ## put us in non-interactive mode
          options["non-interactive"] = true

          ## set version of release-it + tags
          options.increment = version

          options.npm = {
            tag: distTag
          }

          ## if our package.json isnt
          ## set to private: true then
          ## tell release-it to publish
          ## to npm
          if pkg.private isnt true
            options.npm.publish = true

          # options.debug = true
          # options.verbose = true
          # options['dry-run'] = true

          ## spawn release it and automatically
          ## set the changelogCommand to echo this
          ## string (and quote it)
          release.execute(options)
}
