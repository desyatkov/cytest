_         = require("lodash")
fs        = require("fs-extra")
path      = require("path")
moment    = require("moment")
Promise   = require("bluebird")
cwd       = require("./utils/cwd")
git       = require("./git")

fs          = Promise.promisifyAll(fs)
README_PATH = cwd("README.md")
changelogRe = /(## Changelog)/

module.exports = {
  find: (file) ->
    ## because fs.stat will return true
    ## on case-insensitive file names we
    ## must perform additional checks to
    ## verify that the file name actually
    ## matches what we're searching for
    find = =>
      ## get absolute path to file
      file = cwd(file)

      ## get the dir file is in
      dir = path.dirname(file)

      ## if its root return
      if dir is "/" or dir is "."
        return(file)

      ## get all the files in the dir
      fs.readdirAsync(dir)
      .then (files) ->
        ## if our file name is in these
        ## files then we're good to go
        if path.basename(file) in files
          return(file)
        else
          ## else reject
          Promise.reject(new Error("#{file} not found"))

    Promise.try(find)

  create: ->
    fs
    .writeFileAsync(README_PATH, "")
    .then(@commitReadme)
    .return(README_PATH)

  commitReadme: ->
    git.commit(README_PATH, "created #{path.basename(README_PATH)}")

  commitChangelog: (pathToReadme, version) ->
    git.commit(pathToReadme, "updated changelog for version: #{version}")

  write: (pathToReadme, version, log) ->
    fs.readFileAsync(pathToReadme, "utf8")
    .then (str) ->
      if changelogRe.test(str)
        str
      else
        str + "\n\n## Changelog\n"
    .then (str) ->
      ## prepend the changelog with the version
      ## and then add the changelog
      date = moment().format("MM/DD/YY")
      str.replace(changelogRe, "$1\n\n#### #{version} - *(#{date})*\n#{log}")
    .then (str) ->
      fs.writeFileAsync(pathToReadme, str)

  append: (version, log) ->
    Promise.any([
      @find("README.md")
      @find("readme.md")
    ])
    .bind(@)
    .catch(@create)
    .then (pathToReadme) ->
      @write(pathToReadme, version, log)
      .then =>
        @commitChangelog(pathToReadme, version)
}